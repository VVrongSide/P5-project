diff --git a/src/energy/model/basic-energy-source.cc b/src/energy/model/basic-energy-source.cc
index ebe3d5ab7..b2def7b21 100644
--- a/src/energy/model/basic-energy-source.cc
+++ b/src/energy/model/basic-energy-source.cc
@@ -72,7 +72,11 @@ BasicEnergySource::GetTypeId()
             .AddTraceSource("RemainingEnergy",
                             "Remaining energy at BasicEnergySource.",
                             MakeTraceSourceAccessor(&BasicEnergySource::m_remainingEnergyJ),
-                            "ns3::TracedValueCallback::Double");
+                            "ns3::TracedValueCallback::Double")
+            .AddTraceSource("Depleted",
+                            "Is the source depleted?",
+                            MakeTraceSourceAccessor(&BasicEnergySource::m_depleted),
+                            "ns3::TracedValueCallback::bool");
     return tid;
 }
 
@@ -157,7 +161,9 @@ BasicEnergySource::UpdateEnergySource()
     NS_LOG_DEBUG("BasicEnergySource:Updating remaining energy.");
 
     double remainingEnergy = m_remainingEnergyJ;
-    CalculateRemainingEnergy();
+    if (!m_depleted){
+        CalculateRemainingEnergy();
+    }
 
     m_lastUpdateTime = Simulator::Now();
 
@@ -207,6 +213,7 @@ BasicEnergySource::HandleEnergyDrainedEvent()
 {
     NS_LOG_FUNCTION(this);
     NS_LOG_DEBUG("BasicEnergySource:Energy depleted!");
+    NS_LOG_DEBUG ("%INFO TimeStamp: "<<Simulator::Now ().GetSeconds ()<<" secs ");
     NotifyEnergyDrained(); // notify DeviceEnergyModel objects
 }
 
diff --git a/src/energy/model/basic-energy-source.h b/src/energy/model/basic-energy-source.h
index 708aad1f5..3db416e06 100644
--- a/src/energy/model/basic-energy-source.h
+++ b/src/energy/model/basic-energy-source.h
@@ -149,7 +149,7 @@ class BasicEnergySource : public EnergySource
      * set to true when the remaining energy goes below the low threshold,
      * set to false again when the remaining energy exceeds the high threshold
      */
-    bool m_depleted;
+    TracedValue<bool> m_depleted;
     TracedValue<double> m_remainingEnergyJ; //!< remaining energy, in Joules
     EventId m_energyUpdateEvent;            //!< energy update event
     Time m_lastUpdateTime;                  //!< last update time
diff --git a/src/wifi/model/phy-entity.cc b/src/wifi/model/phy-entity.cc
index f2cf6cf87..a312cb63f 100644
--- a/src/wifi/model/phy-entity.cc
+++ b/src/wifi/model/phy-entity.cc
@@ -774,8 +774,11 @@ PhyEntity::RxPayloadFailed(Ptr<const WifiPsdu> psdu, double snr, const WifiTxVec
 void
 PhyEntity::DoEndReceivePayload(Ptr<const WifiPpdu> ppdu)
 {
+
     NS_LOG_FUNCTION(this << ppdu);
-    NS_ASSERT(m_wifiPhy->GetLastRxEndTime() == Simulator::Now());
+    if (!(m_wifiPhy->GetLastRxEndTime() == Simulator::Now())){
+        return;
+    }
     NotifyInterferenceRxEndAndClear(false); // don't reset WifiPhy
 
     m_wifiPhy->m_currentEvent = nullptr;
diff --git a/src/wifi/model/wifi-phy-state-helper.cc b/src/wifi/model/wifi-phy-state-helper.cc
index 05e8745fd..42259438d 100644
--- a/src/wifi/model/wifi-phy-state-helper.cc
+++ b/src/wifi/model/wifi-phy-state-helper.cc
@@ -412,6 +412,10 @@ void
 WifiPhyStateHelper::SwitchToRx(Time rxDuration)
 {
     NS_LOG_FUNCTION(this << rxDuration);
+    if (IsStateOff()){
+        return;
+    }
+
     NS_ASSERT(IsStateIdle() || IsStateCcaBusy());
     Time now = Simulator::Now();
     switch (GetState())
@@ -429,7 +433,7 @@ WifiPhyStateHelper::SwitchToRx(Time rxDuration)
     m_startRx = now;
     m_endRx = now + rxDuration;
     NotifyRxStart(rxDuration);
-    NS_ASSERT(IsStateRx());
+    //NS_ASSERT(IsStateRx());
 }
 
 void
@@ -520,6 +524,9 @@ void
 WifiPhyStateHelper::SwitchFromRxEndOk()
 {
     NS_LOG_FUNCTION(this);
+    if (IsStateOff()){
+        return;
+    }
     NS_ASSERT(m_endRx == Simulator::Now());
     NotifyRxEndOk();
     DoSwitchFromRx();
@@ -529,6 +536,9 @@ void
 WifiPhyStateHelper::SwitchFromRxEndError()
 {
     NS_LOG_FUNCTION(this);
+    if (IsStateOff()){
+        return;
+    }
     NS_ASSERT(m_endRx == Simulator::Now());
     NotifyRxEndError();
     DoSwitchFromRx();
@@ -542,6 +552,9 @@ WifiPhyStateHelper::DoSwitchFromRx()
     m_stateLogger(m_startRx, now - m_startRx, WifiPhyState::RX);
     m_previousStateChangeTime = now;
     m_endRx = Simulator::Now();
+    if (IsStateOff()){
+        return;
+    }
     NS_ASSERT(IsStateIdle() || IsStateCcaBusy());
 }
 
diff --git a/src/wifi/model/wifi-radio-energy-model.cc b/src/wifi/model/wifi-radio-energy-model.cc
index 03dc54131..af4154658 100644
--- a/src/wifi/model/wifi-radio-energy-model.cc
+++ b/src/wifi/model/wifi-radio-energy-model.cc
@@ -120,12 +120,12 @@ WifiRadioEnergyModel::SetEnergySource(const Ptr<EnergySource> source)
     NS_LOG_FUNCTION(this << source);
     NS_ASSERT(source);
     m_source = source;
-    m_switchToOffEvent.Cancel();
-    Time durationToOff = GetMaximumTimeInState(m_currentState);
-    m_switchToOffEvent = Simulator::Schedule(durationToOff,
-                                             &WifiRadioEnergyModel::ChangeState,
-                                             this,
-                                             WifiPhyState::OFF);
+    //m_switchToOffEvent.Cancel();
+    //Time durationToOff = GetMaximumTimeInState(m_currentState);
+    //m_switchToOffEvent = Simulator::Schedule(durationToOff,
+    //                                         &WifiRadioEnergyModel::ChangeState,
+    //                                         this,
+    //                                         WifiPhyState::OFF);
 }
 
 double
@@ -292,24 +292,23 @@ WifiRadioEnergyModel::ChangeState(int newState)
 {
     NS_LOG_FUNCTION(this << newState);
 
-    m_nPendingChangeState++;
-
-    if (m_nPendingChangeState > 1 && newState == WifiPhyState::OFF)
-    {
-        SetWifiRadioState((WifiPhyState)newState);
-        m_nPendingChangeState--;
-        return;
-    }
 
-    if (newState != WifiPhyState::OFF)
-    {
-        m_switchToOffEvent.Cancel();
-        Time durationToOff = GetMaximumTimeInState(newState);
-        m_switchToOffEvent = Simulator::Schedule(durationToOff,
-                                                 &WifiRadioEnergyModel::ChangeState,
-                                                 this,
-                                                 WifiPhyState::OFF);
-    }
+    m_nPendingChangeState++;
+    //if (m_nPendingChangeState > 1 && newState == WifiPhyState::OFF)
+    //{
+    //    NS_LOG_FUNCTION("I am somehow here at time: " << Simulator::Now().GetSeconds());
+    //    SetWifiRadioState((WifiPhyState)newState);
+    //    m_nPendingChangeState--;
+    //    return;
+    //}
+
+    //if (newState != WifiPhyState::OFF)
+    //{
+    //    m_switchToOffEvent.Cancel();
+    //    Time durationToOff = GetMaximumTimeInState(newState);
+    //    m_switchToOffEvent = Simulator::Schedule(durationToOff,
+    //                                             &WifiRadioEnergyModel::ChangeState,this, WifiPhyState::OFF);
+    //}
 
     Time duration = Simulator::Now() - m_lastUpdateTime;
     NS_ASSERT(duration.IsPositive()); // check if duration is valid
@@ -358,6 +357,9 @@ WifiRadioEnergyModel::HandleEnergyDepletion()
     {
         m_energyDepletionCallback();
     }
+    else{
+        NS_LOG_DEBUG("It was null some how");
+    }
 }
 
 void
@@ -377,15 +379,13 @@ WifiRadioEnergyModel::HandleEnergyChanged()
 {
     NS_LOG_FUNCTION(this);
     NS_LOG_DEBUG("WifiRadioEnergyModel:Energy is changed!");
-    if (m_currentState != WifiPhyState::OFF)
-    {
-        m_switchToOffEvent.Cancel();
-        Time durationToOff = GetMaximumTimeInState(m_currentState);
-        m_switchToOffEvent = Simulator::Schedule(durationToOff,
-                                                 &WifiRadioEnergyModel::ChangeState,
-                                                 this,
-                                                 WifiPhyState::OFF);
-    }
+    //if (m_currentState != WifiPhyState::OFF)
+    //{
+    //    m_switchToOffEvent.Cancel();
+    //    Time durationToOff = GetMaximumTimeInState(m_currentState);
+    //    m_switchToOffEvent = Simulator::Schedule(durationToOff,
+    //                                             &WifiRadioEnergyModel::ChangeState,this, WifiPhyState::OFF);
+    //}
 }
 
 WifiRadioEnergyModelPhyListener*
@@ -509,8 +509,8 @@ WifiRadioEnergyModelPhyListener::NotifyRxStart(Time duration)
     {
         NS_FATAL_ERROR("WifiRadioEnergyModelPhyListener:Change state callback not set!");
     }
-    m_changeStateCallback(WifiPhyState::RX);
     m_switchToIdleEvent.Cancel();
+    m_changeStateCallback(WifiPhyState::RX);
 }
 
 void
@@ -595,8 +595,8 @@ WifiRadioEnergyModelPhyListener::NotifySleep()
     {
         NS_FATAL_ERROR("WifiRadioEnergyModelPhyListener:Change state callback not set!");
     }
-    m_changeStateCallback(WifiPhyState::SLEEP);
     m_switchToIdleEvent.Cancel();
+    m_changeStateCallback(WifiPhyState::SLEEP);
 }
 
 void
@@ -618,8 +618,9 @@ WifiRadioEnergyModelPhyListener::NotifyOff()
     {
         NS_FATAL_ERROR("WifiRadioEnergyModelPhyListener:Change state callback not set!");
     }
-    m_changeStateCallback(WifiPhyState::OFF);
     m_switchToIdleEvent.Cancel();
+
+    m_changeStateCallback(WifiPhyState::OFF);
 }
 
 void
